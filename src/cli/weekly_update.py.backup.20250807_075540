#!/usr/bin/env python3
"""
Enhanced weekly update command with automatic market setup and language assignment processing.
Replaces open month data while protecting closed historical months.
Automatically creates missing markets, schedule assignments, and processes language assignments.
"""

import sys
import argparse
import sqlite3
from pathlib import Path
from datetime import datetime
from typing import Dict, Set

# Add tqdm for progress bars
from tqdm import tqdm

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from services.broadcast_month_import_service import BroadcastMonthImportService, BroadcastMonthImportError
from services.import_integration_utilities import get_excel_import_summary, validate_excel_for_import
from database.connection import DatabaseConnection


class WeeklyMarketSetupManager:
    """Lightweight market setup manager optimized for weekly updates."""
    
    def __init__(self, db_connection: DatabaseConnection):
        self.db = db_connection
    
    def scan_excel_for_new_markets(self, excel_file: str) -> Dict[str, Dict]:
        """
        Quick scan of Excel file to detect any new market codes.
        Optimized for smaller weekly files.
        
        Returns:
            Dict mapping new market_code -> {'earliest_date': date, 'spot_count': int}
        """
        print(f"üîç Scanning weekly Excel for new markets...")
        
        try:
            from openpyxl import load_workbook
            
            workbook = load_workbook(excel_file, read_only=True, data_only=True)
            worksheet = workbook.active
            
            # Find required columns
            header_row = next(worksheet.iter_rows(min_row=1, max_row=1, values_only=True))
            market_col_index = None
            air_date_col_index = None
            
            for i, header in enumerate(header_row):
                if header:
                    header_str = str(header).strip().lower()
                    if header_str in ['market_name', 'market', 'market_code']:
                        market_col_index = i
                    elif header_str in ['air_date', 'date', 'airdate']:
                        air_date_col_index = i
            
            if market_col_index is None:
                print("   ‚ÑπÔ∏è  No market column found - skipping market detection")
                return {}
            
            # Get existing markets to identify new ones
            existing_markets = self.get_existing_markets()
            
            markets_data = {}
            new_markets_found = set()
            
            # Process rows to find new markets
            for row_num, row in enumerate(worksheet.iter_rows(min_row=2, values_only=True), start=2):
                if not any(cell for cell in row):
                    continue
                
                if market_col_index < len(row):
                    market_value = row[market_col_index]
                    
                    if market_value:
                        market_code = str(market_value).strip()
                        
                        # Only track if it's a NEW market
                        if market_code not in existing_markets:
                            new_markets_found.add(market_code)
                            
                            # Get air date if available
                            air_date = None
                            if air_date_col_index and air_date_col_index < len(row):
                                air_date_value = row[air_date_col_index]
                                if air_date_value:
                                    try:
                                        if isinstance(air_date_value, datetime):
                                            air_date = air_date_value.date()
                                        else:
                                            air_date = datetime.strptime(str(air_date_value), '%Y-%m-%d').date()
                                    except:
                                        pass
                            
                            # Track new market data
                            if market_code not in markets_data:
                                markets_data[market_code] = {
                                    'earliest_date': air_date,
                                    'latest_date': air_date,
                                    'spot_count': 0
                                }
                            else:
                                if air_date:
                                    if not markets_data[market_code]['earliest_date'] or air_date < markets_data[market_code]['earliest_date']:
                                        markets_data[market_code]['earliest_date'] = air_date
                                    if not markets_data[market_code]['latest_date'] or air_date > markets_data[market_code]['latest_date']:
                                        markets_data[market_code]['latest_date'] = air_date
                            
                            markets_data[market_code]['spot_count'] += 1
            
            workbook.close()
            
            if markets_data:
                print(f"   üÜï Found {len(markets_data)} new markets:")
                for market_code, data in sorted(markets_data.items()):
                    date_range = ""
                    if data['earliest_date']:
                        if data['latest_date'] != data['earliest_date']:
                            date_range = f" ({data['earliest_date']} to {data['latest_date']})"
                        else:
                            date_range = f" ({data['earliest_date']})"
                    print(f"      üìã {market_code}: {data['spot_count']:,} spots{date_range}")
            else:
                print(f"   ‚úÖ No new markets found - all markets already exist")
            
            return markets_data
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Warning: Could not scan for new markets: {str(e)}")
            return {}
    
    def get_existing_markets(self) -> Dict[str, int]:
        """Get existing markets from database."""
        with self.db.transaction() as conn:
            cursor = conn.execute("SELECT market_code, market_id FROM markets")
            return {row[0]: row[1] for row in cursor.fetchall()}
    
    def create_new_markets(self, new_markets: Dict[str, Dict]) -> Dict[str, int]:
        """Create new markets found in weekly data."""
        if not new_markets:
            return {}
        
        print(f"üèóÔ∏è  Creating {len(new_markets)} new markets for weekly update...")
        
        created_markets = {}
        
        with self.db.transaction() as conn:
            for market_code, market_data in sorted(new_markets.items()):
                # Generate market name
                market_name = self._generate_market_name(market_code)
                
                cursor = conn.execute("""
                    INSERT INTO markets (market_code, market_name) 
                    VALUES (?, ?)
                """, (market_code, market_name))
                
                market_id = cursor.lastrowid
                created_markets[market_code] = market_id
                
                print(f"   ‚úÖ Created: {market_code} ({market_name}) - ID: {market_id}")
        
        return created_markets
    
    def setup_schedules_for_new_markets(self, new_markets: Dict[str, Dict], market_mapping: Dict[str, int]) -> int:
        """Setup schedule assignments for newly created markets."""
        if not new_markets:
            return 0
        
        print(f"üóìÔ∏è  Setting up schedules for new markets...")
        assignments_created = 0
        
        with self.db.transaction() as conn:
            for market_code, market_data in new_markets.items():
                market_id = market_mapping[market_code]
                
                # Use earliest date if available, otherwise use current date
                effective_date = market_data['earliest_date'] if market_data['earliest_date'] else datetime.now().date()
                
                cursor = conn.execute("""
                    INSERT INTO schedule_market_assignments 
                    (schedule_id, market_id, effective_start_date, assignment_priority)
                    VALUES (1, ?, ?, 1)
                """, (market_id, effective_date))
                
                assignments_created += 1
                print(f"   ‚úÖ {market_code}: Schedule assignment created (effective from {effective_date})")
        
        return assignments_created
    
    def _generate_market_name(self, market_code: str) -> str:
        """Generate proper market name from code."""
        name_mappings = {
            'NYC': 'NEW YORK',
            'LAX': 'LOS ANGELES', 
            'SFO': 'SAN FRANCISCO',
            'SEA': 'SEATTLE',
            'CHI': 'CHICAGO',
            'MSP': 'MINNEAPOLIS',
            'DAL': 'DALLAS',
            'HOU': 'HOUSTON',
            'WDC': 'WASHINGTON DC',
            'CVC': 'CENTRAL VALLEY',
            'CMP': 'CHI MSP',
            'MMT': 'MAMMOTH',
            'ADMIN': 'ADMINISTRATIVE'
        }
        
        return name_mappings.get(market_code, market_code.upper().replace('_', ' '))
    
    def execute_weekly_market_setup(self, excel_file: str) -> Dict:
        """Execute lightweight market setup for weekly data."""
        start_time = datetime.now()
        
        # Step 1: Scan for new markets
        new_markets = self.scan_excel_for_new_markets(excel_file)
        
        if not new_markets:
            return {
                'new_markets_found': 0,
                'markets_created': 0,
                'schedules_created': 0,
                'duration_seconds': (datetime.now() - start_time).total_seconds()
            }
        
        # Step 2: Create new markets
        created_markets = self.create_new_markets(new_markets)
        
        # Step 3: Setup schedules for new markets
        schedules_created = self.setup_schedules_for_new_markets(new_markets, created_markets)
        
        duration = (datetime.now() - start_time).total_seconds()
        
        return {
            'new_markets_found': len(new_markets),
            'markets_created': len(created_markets),
            'schedules_created': schedules_created,
            'duration_seconds': duration,
            'new_markets': new_markets
        }


class EnhancedWeeklyImporter:
    """Enhanced weekly importer with language assignment integration."""
    
    def __init__(self, db_connection: DatabaseConnection):
        self.db = db_connection
        self.market_manager = WeeklyMarketSetupManager(db_connection)
        self.import_service = BroadcastMonthImportService(db_connection)
    
    def execute_enhanced_weekly_update(self, 
                                     excel_file: str,
                                     auto_setup_markets: bool = True,
                                     dry_run: bool = False) -> Dict:
        """
        Execute enhanced weekly update with language assignment integration.
        """
        start_time = datetime.now()
        batch_id = f"enhanced_weekly_{int(start_time.timestamp())}"
        
        print(f"üîÑ Enhanced Weekly Update Starting...")
        print(f"Excel file: {excel_file}")
        print(f"Auto-setup markets: {auto_setup_markets}")
        print(f"Dry run: {dry_run}")
        print(f"Batch ID: {batch_id}")
        print("=" * 60)
        
        results = {
            'success': False,
            'batch_id': batch_id,
            'market_setup': None,
            'import_result': None,
            'language_assignment': None,  # NEW
            'duration_seconds': 0,
            'error_messages': []
        }
        
        try:
            # Step 1: Market setup (if enabled)
            if auto_setup_markets and not dry_run:
                print(f"üèóÔ∏è  STEP 1: Automatic Market Setup")
                market_setup_result = self.market_manager.execute_weekly_market_setup(excel_file)
                results['market_setup'] = market_setup_result
                
                print(f"üìä Market Setup Results:")
                print(f"   üÜï New markets found: {market_setup_result['new_markets_found']}")
                print(f"   üèóÔ∏è  Markets created: {market_setup_result['markets_created']}")
                print(f"   üóìÔ∏è  Schedule assignments created: {market_setup_result['schedules_created']}")
                print()
            
            # Step 2: Weekly data import
            print(f"üì¶ STEP 2: Weekly Data Import")
            
            if dry_run:
                print(f"üîç DRY RUN - No changes would be made")
                summary = get_excel_import_summary(excel_file, self.db.db_path)
                results['import_result'] = {
                    'would_import': True,
                    'months_found': len(summary['months_in_excel']),
                    'total_spots': summary['total_existing_spots_affected']
                }
            else:
                # Execute actual import with progress tracking
                import_result = self.import_service.execute_month_replacement(
                    excel_file,
                    'WEEKLY_UPDATE',
                    closed_by=None,
                    dry_run=False
                )
                results['import_result'] = import_result
                
                # NEW: Step 3: Language Assignment Processing
                if import_result.success:
                    print(f"\nüéØ STEP 3: Language Assignment Processing")
                    language_result = self._process_language_assignments(batch_id)
                    results['language_assignment'] = language_result
            
            results['success'] = True
            
        except Exception as e:
            error_msg = f"Enhanced weekly update failed: {str(e)}"
            results['error_messages'].append(error_msg)
            print(f"‚ùå {error_msg}")
        
        # Calculate total duration
        results['duration_seconds'] = (datetime.now() - start_time).total_seconds()
        
        return results
    
    def _process_language_assignments(self, batch_id: str) -> Dict:
        """
        NEW: Process language assignments after import with comprehensive progress tracking.
        """
        language_result = {
            'success': False,
            'categorized': 0,
            'processed': 0,
            'language_assigned': 0,
            'default_english_assigned': 0,
            'flagged_for_review': 0,
            'error_messages': []
        }
        
        try:
            # Import language assignment services
            from services.spot_categorization_service import SpotCategorizationService
            from services.language_processing_orchestrator import LanguageProcessingOrchestrator
            
            conn = sqlite3.connect(self.db.db_path)
            
            # Step 3a: Categorization with progress
            print("üè∑Ô∏è  Categorizing spots for language assignment...")
            categorization_service = SpotCategorizationService(conn)
            
            # Get uncategorized spots for progress tracking
            uncategorized_spots = categorization_service.get_uncategorized_spots()
            
            if uncategorized_spots:
                print(f"   üìä Found {len(uncategorized_spots):,} uncategorized spots")
                
                # Categorize in batches with progress tracking
                batch_size = 1000
                total_categorized = 0
                
                with tqdm(total=len(uncategorized_spots), desc="üè∑Ô∏è  Categorizing spots", unit=" spots") as pbar:
                    for i in range(0, len(uncategorized_spots), batch_size):
                        batch = uncategorized_spots[i:i + batch_size]
                        categorization_service.categorize_spots_batch(batch)
                        total_categorized += len(batch)
                        pbar.update(len(batch))
                        pbar.set_description(f"üè∑Ô∏è  Categorized {total_categorized:,}/{len(uncategorized_spots):,}")
                
                language_result['categorized'] = len(uncategorized_spots)
                print(f"   ‚úÖ Categorization complete: {len(uncategorized_spots):,} spots categorized")
            else:
                print(f"   ‚úÖ No uncategorized spots found - all spots already categorized")
            
            # Step 3b: Process all categories with progress
            print("üéØ Processing language assignments...")
            orchestrator = LanguageProcessingOrchestrator(conn)
            
            # Get processing status for progress tracking
            processing_results = orchestrator.process_all_categories()
            
            # Extract detailed results from processing
            summary = processing_results['summary']
            language_result['processed'] = summary['total_processed']
            language_result['language_assigned'] = summary['language_assigned']
            language_result['default_english_assigned'] = summary['default_english_assigned']
            language_result['flagged_for_review'] = summary['flagged_for_review']
            language_result['success'] = True
            
            print(f"‚úÖ Language assignment complete:")
            print(f"   üìä Spots categorized: {language_result['categorized']:,}")
            print(f"   üî§ Spots processed: {language_result['processed']:,}")
            print(f"   üéØ Language assigned: {language_result['language_assigned']:,}")
            print(f"   üá∫üá∏ Default English assigned: {language_result['default_english_assigned']:,}")
            print(f"   üìã Flagged for review: {language_result['flagged_for_review']:,}")
            
            conn.close()
            
        except Exception as e:
            error_msg = f"Language assignment processing failed: {str(e)}"
            language_result['error_messages'].append(error_msg)
            print(f"‚ö†Ô∏è  {error_msg}")
            
            # Try to provide partial success info
            try:
                if 'conn' in locals():
                    conn.close()
            except:
                pass
        
        return language_result


def display_enhanced_weekly_preview(excel_file: str, db_path: str, auto_setup: bool):
    """Display what the enhanced weekly update would do."""
    print(f"üìã Enhanced Weekly Update Preview")
    print(f"=" * 60)
    print(f"Excel file: {excel_file}")
    print(f"Auto-setup markets: {auto_setup}")
    print()
    
    try:
        db_connection = DatabaseConnection(db_path)
        
        # Market setup preview
        if auto_setup:
            market_manager = WeeklyMarketSetupManager(db_connection)
            new_markets = market_manager.scan_excel_for_new_markets(excel_file)
            
            if new_markets:
                print(f"üèóÔ∏è  Market Setup Preview:")
                print(f"   üÜï New markets detected: {len(new_markets)}")
                print(f"   üìã Will create: {sorted(new_markets.keys())}")
                print()
        
        # Standard import preview
        can_proceed = display_weekly_update_preview(excel_file, db_path)
        
        # NEW: Language assignment preview
        if can_proceed:
            print(f"\nüéØ Language Assignment Preview:")
            print(f"   üìã All imported spots will be categorized for language assignment")
            print(f"   üî§ Business rules will be applied automatically")
            print(f"   üìã Spots requiring manual review will be flagged")
            print(f"   üè∑Ô∏è  Categories: LANGUAGE_REQUIRED, DEFAULT_ENGLISH, REVIEW_CATEGORY")
        
        db_connection.close()
        return can_proceed
        
    except Exception as e:
        print(f"‚ùå Error generating enhanced preview: {e}")
        return False


def display_weekly_update_preview(excel_file: str, db_path: str):
    """Display what the weekly update would do (original functionality)."""
    print(f"üì¶ Weekly Update Preview:")
    
    try:
        # Get Excel summary
        summary = get_excel_import_summary(excel_file, db_path)
        
        print(f"   üìÖ Months found: {len(summary['months_in_excel'])}")
        print(f"   üìä Total existing spots: {summary['total_existing_spots_affected']:,}")
        
        # Validation check
        validation = validate_excel_for_import(excel_file, 'WEEKLY_UPDATE', db_path)
        
        if validation.is_valid:
            print(f"   ‚úÖ Weekly update allowed")
        else:
            print(f"   ‚ùå Weekly update BLOCKED")
            print(f"      Reason: {validation.error_message}")
            print(f"      Solution: {validation.suggested_action}")
            return False
        
        # Show month details
        print(f"\nüìÖ Month Details:")
        for month_info in summary['month_details']:
            status = "CLOSED" if month_info['is_closed'] else "OPEN"
            spots = month_info['existing_spots']
            revenue = month_info['existing_revenue']
            status_icon = "üîí" if month_info['is_closed'] else "üìÇ"
            print(f"   {status_icon} {month_info['month']}: {status} - {spots:,} spots (${revenue:,.2f})")
        
        # Import impact
        open_months = summary['open_months']
        print(f"\nüéØ Import Impact:")
        print(f"   ‚Ä¢ {len(open_months)} open months will be updated")
        print(f"   ‚Ä¢ {summary['total_existing_spots_affected']:,} existing spots will be replaced")
        print(f"   ‚Ä¢ Closed months will be protected (no changes)")
        
        if summary['closed_months']:
            print(f"   ‚Ä¢ {len(summary['closed_months'])} closed months: {summary['closed_months']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error generating preview: {e}")
        return False


def get_user_confirmation(total_spots: int, open_months: int, new_markets: int = 0, force: bool = False) -> bool:
    """Get user confirmation for the enhanced update."""
    if force:
        return True
    
    print(f"\nüö® CONFIRMATION REQUIRED")
    actions = [
        f"REPLACE {total_spots:,} existing spots",
        f"Update {open_months} open months",
        "Process language assignments automatically",  # NEW
        "Preserve all closed/historical months"
    ]
    
    if new_markets > 0:
        actions.insert(0, f"Create {new_markets} new markets")
    
    print(f"This will:")
    for action in actions:
        print(f"  ‚Ä¢ {action}")
    
    while True:
        response = input(f"\nProceed with enhanced weekly update? (yes/no): ").strip().lower()
        if response in ['yes', 'y']:
            return True
        elif response in ['no', 'n', '']:
            return False
        else:
            print("Please enter 'yes' or 'no'")


def main():
    parser = argparse.ArgumentParser(
        description="Enhanced weekly update with automatic market setup and language assignment",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Standard weekly update with language assignment
  python enhanced_weekly_update.py data/booked_business_current.xlsx

  # Enhanced weekly update with automatic market setup and language assignment
  python enhanced_weekly_update.py data/booked_business_current.xlsx --auto-setup

  # Preview what would happen
  python enhanced_weekly_update.py data/weekly_data.xlsx --auto-setup --dry-run

Enhanced Features:
  ‚Ä¢ Automatic detection of new markets in weekly data
  ‚Ä¢ Missing market creation with proper naming
  ‚Ä¢ Schedule assignment setup for new markets
  ‚Ä¢ Integrated language assignment processing with business rules
  ‚Ä¢ Comprehensive progress tracking and reporting
  ‚Ä¢ Backward compatible with existing workflows
        """
    )
    
    parser.add_argument("excel_file", help="Path to Excel file to import")
    parser.add_argument("--auto-setup", action="store_true",
                       help="Automatically create missing markets and schedule assignments")
    parser.add_argument("--db-path", default="data/database/production.db",
                       help="Database path (default: production.db)")
    parser.add_argument("--dry-run", action="store_true",
                       help="Preview import without making changes")
    parser.add_argument("--force", action="store_true",
                       help="Skip confirmation prompts")
    parser.add_argument("--verbose", action="store_true",
                       help="Enable verbose logging")
    
    args = parser.parse_args()
    
    # Setup logging
    import logging
    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level, format='%(levelname)s: %(message)s')
    
    # Validate inputs
    if not Path(args.excel_file).exists():
        print(f"‚ùå Excel file not found: {args.excel_file}")
        sys.exit(1)
    
    if not Path(args.db_path).exists():
        print(f"‚ùå Database not found: {args.db_path}")
        print(f"Run: uv run python scripts/setup_database.py --db-path {args.db_path}")
        sys.exit(1)
    
    try:
        print(f"üîÑ Enhanced Weekly Update Tool")
        print(f"Excel file: {args.excel_file}")
        print(f"Database: {args.db_path}")
        print(f"Auto-setup: {args.auto_setup}")
        if args.dry_run:
            print(f"Mode: DRY RUN (no changes will be made)")
        print()
        
        # Display enhanced preview and validate
        can_proceed = display_enhanced_weekly_preview(args.excel_file, args.db_path, args.auto_setup)
        
        if not can_proceed:
            print(f"\n‚ùå Weekly update cannot proceed due to validation errors")
            print(f"üí° Common solutions:")
            print(f"  ‚Ä¢ Remove closed month data from Excel file")
            print(f"  ‚Ä¢ Use historical import mode for closed months")
            print(f"  ‚Ä¢ Check if months need to be manually closed first")
            sys.exit(1)
        
        # Get confirmation unless forced or dry run
        if not args.dry_run and not args.force:
            summary = get_excel_import_summary(args.excel_file, args.db_path)
            new_market_count = 0
            
            if args.auto_setup:
                # Estimate new markets
                db_connection = DatabaseConnection(args.db_path)
                market_manager = WeeklyMarketSetupManager(db_connection)
                new_markets = market_manager.scan_excel_for_new_markets(args.excel_file)
                new_market_count = len(new_markets)
                db_connection.close()
            
            confirmed = get_user_confirmation(
                summary['total_existing_spots_affected'],
                len(summary['open_months']),
                new_market_count,
                args.force
            )
            
            if not confirmed:
                print(f"‚ùå Weekly update cancelled by user")
                sys.exit(0)
        
        # Execute the enhanced update
        db_connection = DatabaseConnection(args.db_path)
        importer = EnhancedWeeklyImporter(db_connection)
        
        try:
            results = importer.execute_enhanced_weekly_update(
                args.excel_file,
                args.auto_setup,
                args.dry_run
            )
            
            # Display enhanced results
            print(f"\n{'='*60}")
            if args.dry_run:
                print(f"üîç ENHANCED WEEKLY UPDATE DRY RUN COMPLETED")
            else:
                print(f"üéâ ENHANCED WEEKLY UPDATE COMPLETED")
            print(f"{'='*60}")
            
            print(f"üìä Overall Results:")
            print(f"  Success: {'‚úÖ' if results['success'] else '‚ùå'}")
            print(f"  Duration: {results['duration_seconds']:.2f} seconds")
            print(f"  Batch ID: {results['batch_id']}")
            
            # Market setup results
            if results['market_setup']:
                setup = results['market_setup']
                print(f"\nüèóÔ∏è  Market Setup Results:")
                print(f"  New markets found: {setup['new_markets_found']}")
                print(f"  Markets created: {setup['markets_created']}")
                print(f"  Schedule assignments created: {setup['schedules_created']}")
                print(f"  Setup duration: {setup['duration_seconds']:.2f} seconds")
            
            # Import results
            if results['import_result']:
                import_res = results['import_result']
                print(f"\nüì¶ Import Results:")
                if not args.dry_run and hasattr(import_res, 'success'):
                    print(f"  Records deleted: {import_res.records_deleted:,}")
                    print(f"  Records imported: {import_res.records_imported:,}")
                    print(f"  Net change: {import_res.records_imported - import_res.records_deleted:+,}")
                    print(f"  Months affected: {len(import_res.broadcast_months_affected)}")
                else:
                    print(f"  Would import: {import_res.get('total_spots', 0):,} spots")
                    print(f"  Months found: {import_res.get('months_found', 0)}")
            
            # NEW: Language assignment results
            if results['language_assignment']:
                lang_res = results['language_assignment']
                print(f"\nüéØ Language Assignment Results:")
                print(f"  Spots categorized: {lang_res['categorized']:,}")
                print(f"  Spots processed: {lang_res['processed']:,}")
                print(f"  Language assigned: {lang_res['language_assigned']:,}")
                print(f"  Default English assigned: {lang_res['default_english_assigned']:,}")
                print(f"  Flagged for review: {lang_res['flagged_for_review']:,}")
                print(f"  Success: {'‚úÖ' if lang_res['success'] else '‚ùå'}")
                
                if lang_res['error_messages']:
                    print(f"  Errors: {len(lang_res['error_messages'])}")
            
            if results['error_messages']:
                print(f"\n‚ùå Errors:")
                for error in results['error_messages']:
                    print(f"  ‚Ä¢ {error}")
                sys.exit(1)
            
            if results['success'] and not args.dry_run:
                print(f"\n‚úÖ Enhanced weekly update completed successfully!")
                print(f"üìã Summary:")
                print(f"   ‚Ä¢ Updated {len(results['import_result'].broadcast_months_affected) if results['import_result'] and hasattr(results['import_result'], 'broadcast_months_affected') else 'N/A'} open months")
                if results['market_setup'] and results['market_setup']['markets_created'] > 0:
                    print(f"   ‚Ä¢ Created {results['market_setup']['markets_created']} new markets")
                if results['language_assignment'] and results['language_assignment']['success']:
                    print(f"   ‚Ä¢ Processed {results['language_assignment']['processed']:,} language assignments")
                print(f"   ‚Ä¢ Historical/closed months preserved")
                print(f"   ‚Ä¢ Database ready for reporting")
                
                print(f"\nüí° Next steps:")
                if results['language_assignment'] and results['language_assignment']['flagged_for_review'] > 0:
                    print(f"   ‚Ä¢ Review flagged spots: uv run python cli/assign_languages.py --review-required")
                print(f"   ‚Ä¢ Generate reports with updated data")
                print(f"   ‚Ä¢ Close current month when ready: uv run python src/cli/close_month.py")
            
        finally:
            db_connection.close()
    
    except BroadcastMonthImportError as e:
        print(f"‚ùå Import error: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print(f"\n‚ùå Weekly update cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()